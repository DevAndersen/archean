@page "/chat"
@using Archean.App.WebApp.Services
@using Archean.Core
@using Archean.Core.Models.Events
@using Archean.Core.Services
@using Archean.Core.Services.Events
@using System.Text.RegularExpressions
@inject MemoryLoggerOutput MemoryLoggerOutput
@inject ChatLogService ChatLogService
@inject IGlobalEventBus GlobalEventBus
@inject IChatService ChatService
@implements IDisposable

<PageTitle>Chat - Archean</PageTitle>

<div class="interface" style="overflow: hidden">
    <div class="interface-title">Chat</div>
    <div class="interface-indentation" style="background-color: #000; gap: var(--spacing); padding: var(--spacing); overflow: scroll; flex-grow: 1; color: #fff; font-size: 14px">
        @foreach (string message in ChatLogService.Messages)
        {
            <div>
                @foreach (Match match in ChatColorRegex().Matches(message))
                {
                    <span style="color: @GetColor(match.Groups[1].Value)">@match.Groups[2].Value</span>
                }
            </div>
        }
    </div>
    <div style="display: flex; gap: var(--spacing)">
            <input type="text"
                   class="chat-input"
                   placeholder="Chat as server..."
                   data-truncated="@_willMessageBeTruncated"
                   @bind="_message"
                   @oninput="OnInput"
                   @onkeyup="(async args => await OnTextboxSubmit(args))" />
        <button @onclick="(async () => await OnSubmitAsync())" disabled="@_willMessageBeTruncated">
            @(_willMessageBeTruncated ? $"Message too long ({_messageLength - @Constants.Networking.StringLength})" : "Send message")
        </button>
    </div>
</div>

@code
{
    private string? _message;
    private int _messageLength;
    private bool _willMessageBeTruncated;

    protected override void OnInitialized()
    {
        GlobalEventBus.Subscribe<MessageEvent>(OnMessageEventAsync, EventPriority.Default);
    }

    private void OnInput(ChangeEventArgs args)
    {
        if (args.Value is string str)
        {
            (_messageLength, _willMessageBeTruncated) = AttemptMessageFormatting(str);
        }
    }

    private async Task OnTextboxSubmit(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await OnSubmitAsync();
        }
    }

    private async Task OnSubmitAsync()
    {
        if (string.IsNullOrWhiteSpace(_message) || _willMessageBeTruncated)
        {
            return;
        }

        await GlobalEventBus.InvokeEventAsync(new MessageEvent
        {
            PlayerSender = null,
            Message = _message
        });

        _message = null;
        _messageLength = 0;
        _willMessageBeTruncated = false;
    }

    private string GetColor(string colorTag)
    {
        return colorTag switch
        {
            "&0" => "#000",
            "&1" => "#00A",
            "&2" => "#0A0",
            "&3" => "#0AA",
            "&4" => "#A00",
            "&5" => "#A0A",
            "&6" => "#AA0",
            "&7" => "#AAA",
            "&8" => "#555",
            "&9" => "#55F",
            "&a" => "#5F5",
            "&b" => "#5FF",
            "&c" => "#F55",
            "&d" => "#F5F",
            "&e" => "#FF5",
            "&f" => "#FFF",
            _ => "#fff"
        };
    }

    private (int untruncatedLength, bool willMessageBeTruncated) AttemptMessageFormatting(string message)
    {
        if (string.IsNullOrWhiteSpace(message))
        {
            return (0, false);
        }

        MessageEvent messageEvent = new MessageEvent
        {
            PlayerSender = null,
            Message = message
        };

        string formattedMessage = ChatService.FormatMessageEvent(messageEvent, out bool wasMessageTruncated, out int untruncatedLength);
        return (untruncatedLength, wasMessageTruncated);
    }

    private async Task OnMessageEventAsync(MessageEvent messageEvent)
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        GlobalEventBus.Unsubscribe<MessageEvent>(OnMessageEventAsync);
    }
}
